// generated by tool/make_ast.py, do not modify!
package parser

import "toe/lexer"

const (
	_ = NodeType(iota)
	BINARY
	UNARY
	LITERAL
)

type Binary struct {
	Token lexer.Token
	Left  Expr
	Right Expr
}

func (node *Binary) Tok() lexer.Token { return node.Token }
func (node *Binary) Type() NodeType   { return BINARY }
func (node *Binary) expr()            {}

type Unary struct {
	Token lexer.Token
	Right Expr
}

func (node *Unary) Tok() lexer.Token { return node.Token }
func (node *Unary) Type() NodeType   { return UNARY }
func (node *Unary) expr()            {}

type Literal struct {
	Token lexer.Token
}

func (node *Literal) Tok() lexer.Token { return node.Token }
func (node *Literal) Type() NodeType   { return LITERAL }
func (node *Literal) expr()            {}

func newBinary(Token lexer.Token, Left Expr, Right Expr) *Binary {
	return &Binary{Token: Token, Left: Left, Right: Right}
}
func newUnary(Token lexer.Token, Right Expr) *Unary { return &Unary{Token: Token, Right: Right} }
func newLiteral(Token lexer.Token) *Literal         { return &Literal{Token: Token} }
